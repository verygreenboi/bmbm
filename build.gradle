// Top-level build file where you can add configuration options common to all sub-projects/modules.

buildscript {
    repositories {
        jcenter()
        mavenCentral()
        maven {
            url 'https://dl.bintray.com/paystack/maven/'
        }
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:2.1.0'
        classpath 'com.github.triplet.gradle:play-publisher:1.1.4'
        classpath 'com.neenbedankt.gradle.plugins:android-apt:1.8'

        // NOTE: Do not place your application dependencies here; they belong
        // in the individual module build.gradle files
    }
}

allprojects {
    repositories {
        jcenter()
        mavenCentral()
        maven { url "https://jitpack.io" }
    }
    // *** common methods ***

    /**
     * Will return version from properties file and replace -SNAPSHOT by GIT commit hash
     * to recognize origin commit for the every build.
     */
    project.ext.evalVersionName = {
        if (isIDEBuild()) {
            logger.info("IDE build");
            return "dev"
        } else if (isSnapshotBuild()) {
            logger.info("SNAPSHOT build");
            if (checkUncommitedChanges()) {
                logger.warn("You have uncommited changes!")
            }
            return project.VERSION.toUpperCase().replace("SNAPSHOT", getGitHash())
        }
        return project.VERSION;
    }

    /**
     * Return true if version of the project end by SNAPSHOT
     */
    project.ext.isSnapshotBuild = {
        return project.VERSION.toUpperCase().contains("SNAPSHOT");
    }

    /**
     * Creates versionCode from number of commits in GIT
     */
    project.ext.evalVersionCode = {
        // number of commits from HEAD to oldest one, useful for releasing from one branch only
        def p = Runtime.getRuntime().exec("git rev-list HEAD --count")
        // number of commit in all branches together (also dead one)
        //def p = Runtime.getRuntime().exec("git rev-list --all --count")

        def result = p.waitFor()
        if (result != 0) {
            return 0 // no git revisions
        }
        return p.getInputStream().readLines().get(0).toInteger()
    }

    /**
     * Renames APK name to contain version, build number and commit hash.
     */
    project.ext.renameApk = { variant ->
        variant.outputs.each { output ->
            File file = output.outputFile
            String gitHash = getGitHash()

            def name = output.outputFile.name.replace("-", ",").replace(project.name + ",",
                    project.parent.name + "-" + project.name + "-" +
                            project.VERSION + "-" + variant.mergedFlavor.versionCode + "-" +
                            gitHash + "-")

            output.outputFile = new File(file.parent, name)
        }
    }

    /**
     * Return last commit git hash string.
     */
    project.ext.getGitHash = {
        // git hash
        def command = Runtime.getRuntime().exec("git rev-parse --short HEAD")
        def result = command.waitFor()
        def hash = (result == 0) ? command.inputStream.text.trim() : "nogit"
        return hash;
    }

    /**
     * Check if project has uncommited changes
     */
    project.ext.checkUncommitedChanges = {
        def command = Runtime.getRuntime().exec("git diff-index --quiet HEAD")
        return command.waitFor() == 1
    }

    project.ext.checkExitValue = { exitValue, expectedValue ->
        if (exitValue != expectedValue) {
            throw new Exception("Failed with exit code " + exitValue.toString())
        }
    }

    project.ext.isWindows = {
        return Os.isFamily(Os.FAMILY_WINDOWS)
    }

    project.ext.isIDEBuild = {
        return (boolean) project.properties['android.injected.invoked.from.ide']
    }
}

task clean(type: Delete) {
    delete rootProject.buildDir
}
